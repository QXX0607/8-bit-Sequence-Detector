// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/16/2019 19:00:37"
                                                                                
// Verilog Test Bench template for design : count4
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module count4_tb();
//reg eachvec;
reg clk;
//reg key2;
reg rst_n;
reg x0;
reg x1;
reg x2;
reg x3;
// wires                                               
wire z0;
wire z1;
wire z2;
wire z3;
wire z4;
wire z5;
wire z6;
wire z7;
reg[15:0] data;
                         
count4 i1 (   
	.clk(clk),
	//.key2(key2),
	.rst_n(rst_n),	
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.z0(z0),
	.z1(z1),
	.z2(z2),
	.z3(z3),
	.z4(z4),
	.z5(z5),
	.z6(z6),
	.z7(z7)
);
initial
      begin
      clk=0;
		rst_n=0;
		//key2=0;
		#100
		rst_n=1;
		//key2=1;
		data=16'b1011_1111_0100_0000;
		#(100*100) $stop;
      end
always #28 clk=~clk;
always @ (posedge clk)
	   begin			  
	   #100
	   x0=data[12];
		x1=data[13];
		x2=data[14];
		x3=data[15];//x3�Ǹ�λ
		#100
		
		
		
	   x0=data[8];
		x1=data[9];
		x2=data[10];
		x3=data[11];//x3�Ǹ�λ		
	  data<={data[14:0],data[15]};
	  end	  
initial $monitor($time,,,"abcdefgh = %b%b%b%b%b%b%b%b",z7,z6,z5,z4,z3,z2,z1,z0); 
endmodule

